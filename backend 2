// server.js

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(bodyParser.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect('mongodb://localhost/project_management_app', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('Could not connect to MongoDB', err));

// Define Project Schema
const projectSchema = new mongoose.Schema({
  title: String,
  description: String,
  tasks: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Task' }]
});

const Project = mongoose.model('Project', projectSchema);

// Define Task Schema
const taskSchema = new mongoose.Schema({
  title: String,
  description: String,
  dueDate: Date,
  completed: Boolean
});

const Task = mongoose.model('Task', taskSchema);

// API Routes
app.get('/api/projects', async (req, res) => {
  const projects = await Project.find().populate('tasks');
  res.json(projects);
});

app.post('/api/projects', async (req, res) => {
  const { title, description } = req.body;
  const project = new Project({ title, description });
  await project.save();
  res.status(201).json(project);
});

// Similarly, define routes for tasks

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
